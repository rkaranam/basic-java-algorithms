Data Structures in Java

1. You cannot call a sort method on an ArrayList.

2. Some of the key collection classes are:
	
	TreeSet
		Keeps the elements sorted and prevents duplicates

	HashMap
		Let's you store and access elements as name/value pairs

	LinkedList
		Designed to give better performance when you insert or delete 
		elements from the middle of the collection

	HashSet
		Prevents duplicates in the collection, and given an element, can 
		find that element in the collection quickly

	LinkedHashMap
		Like a regular HashMap, except it can remember the order in which 
		elements (name/value pairs) were inserted, or it can be configured 
		to remember the order in which elements were last accessed
		
3. Every time you insert into a TreeSet, the TreeSet has to take the time 
   to figure out where in the tree the new element must go, so it is expensive

4. It's slower to insert something in an ArrayList somewhere other than at 
   the end. So using the overloaded add(index, element) method doesn't work
   as quickly as calling the add(element) - which puts the added element at
   the end

5. With generics, you can create type-safe collections where more problems
   are caught at compile-time instead of runtime

6. In generics, 'E' is a stand-in for "the type of element you want this 
   collection to hold and return"

7. A 'generic class' means that the class declaration includes a type parameter.
   A 'generic method' means that the method declaration uses a type parameter in
   its signature

8. We can use type parameters in a method in several different ways:

	i. Using a type parameter defined in the class declaration

		public class ArrayList<E> extends AbstractList<E> ... {
			public boolean add(E 0) {
				...
			}
		}

		We can use the 'E' here ONLY because it's already been defined as
		part of the class

	ii. Using a type parameter that was NOT defined in the class declaration

		public <T extends Animal> void takeThing(ArrayList<T> list)

		Here, we can use <T> because we declared 'T' earlier in the method
		declaration - before the return type. This method says that T can be
		"any type of Animal"

9. public <T extends Animal> void takeThing(ArrayList<T> list)

				is not the same as
				
   public void takeThing(ArrayList<Animal> list)

   Explanation:
   		The first one, where <T extends Animal> is part of the method
   	declaration, means that any ArrayList declared of a type that is
   	Animal or one of Animal's subtypes (like Dog or Cat), is legal. So,
   	we can invoke the top method using an ArrayList<Dog>, ArrayList<Cat>,
   	or ArrayList<Animal>

   		The second one, where the method argument is (ArrayList<Animal> list)
   	means that only an ArrayList<Animal> is legal. In other words, while
   	the first version takes an ArrayList of 'any' type that is a type of 
   	Animal (Animal, Dog, Cat, etc.), the second version takes 'only' an ArrayList
   	of type Animal. Not ArrayList<Dog>, or ArrayList<Cat> but only 
   	ArrayList<Animal>

9. In generics, the keyword "extends" really means "is-a", and works for BOTH
   classes and interfaces

10. Comparable interface (java.lang.Comparable) has only one method to implement:
	
		public interface Comparable<T> {
			int compareTo(T obj);
		}

		Returns
			a negative integer - when this object is less than the specified object
			              zero - when this object is equal to the specified object	
			a positive integer - when this object is greater than the specified obj

11. An element in a list can compare itself to another of its own type in only one
    way, using its compareTo() method.

12. Comparator is external to the element type you're comparing - it's a separate class

13. If you pass a Comparator to the sort() method, the sort order is determined by 
    the Comparator rather than the element's own compareTo() method

14. Invoking the one-argument sort(List o) method means the list element's compareTo()
    method determines the order. So the elements in the list MUST implement the 
    Comparable interface

15. Invoking sort(List o, Comparator c) means the list element's compareTo() method
    will NOT be called, and the Comparator's compare() method will be used instead.
    That means the elements in the list do NOT need to implement the Comparable interface

